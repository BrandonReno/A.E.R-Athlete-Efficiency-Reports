basePath: /
consumes:
- application/json
definitions:
  Athlete:
    properties:
      age:
        description: The age of the athlete
        format: uint8
        minimum: 18
        type: integer
        x-go-name: Age
      athlete_id:
        description: The unique ID that distinguishes athletes
        readOnly: true
        type: string
        x-go-name: Athlete_ID
      first_name:
        description: The first name of the athlete
        type: string
        x-go-name: First_Name
      joined:
        description: The date the athlete joined AER
        readOnly: true
        type: string
        x-go-name: Joined
      last_name:
        description: The last name of the athlete
        type: string
        x-go-name: Last_Name
    required:
    - first_name
    - last_name
    - age
    type: object
    x-go-package: github.com/BrandonReno/A.E.R/docs
  Workout:
    properties:
      date:
        description: The date the workout was completed
        type: string
        x-go-name: Date
      description:
        description: The description of the workout, how the athlete felt, what they
          did, etc
        type: string
        x-go-name: Description
      rating:
        description: The athletes rating of the workout
        format: int64
        maximum: 10
        minimum: 0
        type: integer
        x-go-name: Rating
      sport:
        description: The sport/excercise the athlete did
        type: string
        x-go-name: Sport
      workout_id:
        description: The unique integer ID of an athletes workout
        format: int64
        readOnly: true
        type: integer
        x-go-name: Workout_ID
    required:
    - date
    - description
    - sport
    - rating
    type: object
    x-go-package: github.com/BrandonReno/A.E.R/docs
info:
  description: |-
    The purpose of this API is to handle back end
    AER services following RESTful principles
  title: 'AER: Workout API'
  version: 1.0.0
paths:
  /:
    get:
      description: Lists all athletes registered in the system
      operationId: listAthletes
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/athletesResponse'
      schemes:
      - http
      tags:
      - athletes
  /athleteID{aid}:
    post:
      consumes:
      - application/json
      description: Adds a new workout to the database
      operationId: addWorkout
      parameters:
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/Workout'
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
      schemes:
      - http
      tags:
      - workouts
  /athletes:
    post:
      consumes:
      - application/json
      description: Adds a new workout to the database
      operationId: addAthlete
      parameters:
      - in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/Athlete'
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
      schemes:
      - http
      tags:
      - athletes
  /athletes/athlete{id}:
    delete:
      description: Deletes a specified athlete by id
      operationId: deleteAthlete
      parameters:
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      responses:
        "201":
          $ref: '#/responses/noContent'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - athletes
  /athletes/athleteID{aid}:
    get:
      description: Lists information from a specified athlete
      operationId: getAthlete
      parameters:
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/singleAthlete'
      schemes:
      - http
      tags:
      - athletes
    put:
      consumes:
      - application/json
      description: Updates an athlete in the system based on the given ID
      operationId: updateAthlete
      parameters:
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      - in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/Athlete'
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - athletes
  /workouts/athleteID{aid}/workoutID{ID}:
    get:
      description: Gets a single workout from a specified athlete
      operationId: getSingleWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: workout_id
        required: true
        type: integer
        x-go-name: ID
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/singleWorkout'
      schemes:
      - http
      tags:
      - workouts
    put:
      consumes:
      - application/json
      description: Updates a workout in the system based on the given ID
      operationId: updateWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: workout_id
        required: true
        type: integer
        x-go-name: ID
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/Workout'
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - workouts
  /workouts/wid{id}:
    delete:
      description: Deletes a specified workout by id
      operationId: deleteWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: workout_id
        required: true
        type: integer
        x-go-name: ID
      - example: H3bfj78eHe
        in: path
        name: athlete_id
        required: true
        type: string
        x-go-name: ID
      responses:
        "201":
          $ref: '#/responses/noContent'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - workouts
produces:
- application/json
responses:
  badRequest:
    description: Index Not Found
    headers:
      error:
        example: Could not find the workout or athlete ID in the database
        type: string
  listAthletes:
    description: All athletes are returned in the response
    schema:
      items:
        $ref: '#/definitions/Athlete'
      type: array
  noContent:
    description: No content is returned
  singleAthlete:
    description: A single athlete returns in the response
    schema:
      $ref: '#/definitions/Athlete'
  singleWorkout:
    description: A single workout returns in the response
    schema:
      $ref: '#/definitions/Workout'
  verror:
    description: Validation Error
    headers:
      error:
        example: Unable to validate athlete or workout object
        type: string
  workoutsResponse:
    description: A list of workouts returns in the response
    schema:
      items:
        $ref: '#/definitions/Workout'
      type: array
schemes:
- http
swagger: "2.0"
