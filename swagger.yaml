basePath: /
consumes:
- application/json
definitions:
  Athlete:
    description: Athlete Structure which defines the 'User' of a workout
    properties:
      age:
        description: The age of the user
        format: uint8
        maximum: 100
        minimum: 18
        type: integer
        x-go-name: Age
      athlete_id:
        description: The ID linking to the user
        format: int64
        minimum: 1
        readOnly: true
        type: integer
        x-go-name: ID
      name:
        description: The full name of the user
        maxLength: 50
        minLength: 5
        type: string
        x-go-name: Name
      sport:
        description: The sport the user does
        type: string
        x-go-name: Sport
    required:
    - name
    - sport
    type: object
    x-go-package: github.com/BrandonReno/A.E.R/docs
  Workout:
    properties:
      date:
        description: The date this workout was completed
        readOnly: true
        type: string
        x-go-name: Date
      description:
        description: The description of the workout
        maxLength: 500
        type: string
        x-go-name: Description
      id:
        description: The id for this workout
        format: int64
        minimum: 1
        readOnly: true
        type: integer
        x-go-name: ID
      user:
        $ref: '#/definitions/Athlete'
    required:
    - user
    - description
    type: object
    x-go-package: github.com/BrandonReno/A.E.R/docs
info:
  description: |-
    The purpose of this API is to handle back end
    AER services following RESTful principles
  title: 'AER: Workout API'
  version: 1.0.0
paths:
  /:
    get:
      description: Lists workouts from all athletes in the system
      operationId: listWorkouts
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/workoutsResponse'
      schemes:
      - http
      tags:
      - workouts
  /workouts:
    post:
      consumes:
      - application/json
      description: Adds a new workout to the database
      operationId: addWorkout
      parameters:
      - in: body
        name: Body
        schema:
          items:
            $ref: '#/definitions/Workout'
          type: array
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
      schemes:
      - http
      tags:
      - workouts
  /workouts/wid{id}:
    delete:
      description: Deletes a specified workout by id
      operationId: deleteWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "201":
          $ref: '#/responses/noContent'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - workouts
    get:
      description: Displays a single workout based upon the inputted ID
      operationId: getWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/singleWorkout'
        "400":
          $ref: '#/responses/verror'
      schemes:
      - http
      tags:
      - workouts
    put:
      consumes:
      - application/json
      description: Updates a workout in the system based on the given ID
      operationId: updateWorkout
      parameters:
      - example: 374638
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      - in: body
        name: Body
        schema:
          items:
            $ref: '#/definitions/Workout'
          type: array
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/verror'
        "404":
          $ref: '#/responses/badRequest'
      schemes:
      - http
      tags:
      - workouts
produces:
- application/json
responses:
  badRequest:
    description: Index Not Found
    headers:
      error:
        example: Could not delete/update workout
        type: string
  noContent:
    description: No content is returned
  singleWorkout:
    description: A single workout returns in the response
    schema:
      $ref: '#/definitions/Workout'
  verror:
    description: Validation Error
    headers:
      error:
        example: Unable to validate JSON object
        type: string
  workoutsResponse:
    description: A list of workouts returns in the response
    schema:
      items:
        $ref: '#/definitions/Workout'
      type: array
schemes:
- http
swagger: "2.0"
